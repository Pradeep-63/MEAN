Q-Queries in MongoDb ?
Ans:-CRUD operation in mongodb:
CREATE:
 1.insertOne-The insertOne method is used to insert a single document into a collection.
 Syntax:db.collection_name.insertOne(document)
 example:db.users.insertOne({
  name: "pradeep jana",
  age: 22,
  email: "pradeep.doe@example.com"
  })

 2.insertMany-The insertMany method is used to insert multiple documents into a collection.
 syntax:db.collection_name.insertMany(documents)
 example:db.users.insertMany([
  {
    name: "pradeep",
    age: 22,
    email: "pradeep@example.com"
  },
  {
    name: "shishir",
    age: 22,
    email: "shishir@example.com"
  }
 ])
 sort,limit,count,distict,populate,projection
 find:like query
READ:
 1.find:The find method is used to retrieve multiple documents from a collection that match a query.
 syntax:db.collection_name.find(query)
 example:db.users.find({ age: { $gt: 25 } })
 2.findone:The findOne method is used to retrieve a single document from a collection that matches a query.
 synatx:db.collection_name.findOne(query)
 example:db.users.findOne({ name: "pradeep jana" })
UPDATE:
1.updateone:The updateOne method is used to update a single document that matches the given filter criteria.
syntax:db.collection_name.updateOne(filter, update)
example:db.users.updateOne(
   { name: "pradeep jana" },
   { $set: { age: 22 } }
   )
2.updatemany:The updateMany method is used to update multiple documents that match the given filter criteria.
synatx:db.collection.updateMany(filter, update)
example:db.users.updateMany(
   { age: { $lt: 18 } },
   { $set: { status: "minor" } }
  )
DELETE:
1.deleteOne:The deleteOne method is used to remove a single document from a collection that matches the given filter criteria.
syntax:db.collection_name.deleteOne(filter)
example:db.users.deleteOne(
  { name: "pradeep jana" }
)
2.deleteMany:The deleteMany method is used to remove multiple documents from a collection that match the given filter criteria.
syntax:db.collection_name.deleteMany(filter)
example:db.users.deleteMany({ status: "inactive" })
Q-Operators in Mongodb ?
Ans:
COMPARISION OPERATOR
 1.$eq:The $eq operator matches documents where the value of the field is equal to the specified value.
 synatx:{field: {$eq: value}}
 example:db.employee.find({salary: {$eq: 30000}})
 2.$ne:The $ne operator selects those documents where the field value is not equal to the given value.
 synatx:{field: {$ne: value}}
 example:db.employee.find({experienceYear: {$ne: 2}})
 3.$gt:It is used to find documents where the value in the field is greater than(>) a given value.
 syntax:{field: {$gt: value}}
 example:db.employee.find({salary: {$gt: 35000}})
 4.$gte:$gte operator selects those documents where the field value is greater than equals to(>=) the given value.
 syntax:{field: {$gte: value}}
 example:db.employee.find({salary: {$gte: 35000}})
 5.$lt:The $lt operator selects the documents with a value less than (<) the given value.
   syntax:{field: {$lt: value}}
   example:db.employee.find({salary: {lt:35000}})
 6.$lte:$lte operator selects those documents where the field value is less than equal to (<=) the given value.
  syntax:{field: {$lte: value}}
  example:db.employee.find({salary: {$lte: 35000}})
 7.$in:The MongoDB $in operator is used to match documents where the value of a field equals any value in a specified array.
  syntax:{field: {$in: [value1, value2, value3, ...]}}
  example:db.employee.find({name: {$in: ["pradeep", "dibya"]}})
8.$nin:The $nin operator selects those documents where the field value is not equal to any of the given values in the array and the field that does not exist.
syntax:{field: {$nin: [value1, value2, value3, ...]}}
example:db.course.find({language: {$nin: ["C#", "Python"]}})
LOGICAL OPERATOR:
1.$and: This operator is used to perform logical AND operation on the array of one or more expressions and select or retrieve only those documents that match all the given expression in the array. You can use this operator in methods like find(), update(), etc. according to your requirements.
syntax:{ $and: [ { Expression1 }, { Expression2 }, ..., { ExpressionN } ] }
example:db.student.find({$and: [{branch: "ECSE"}, 
                            {joiningYear: 2020}]})
2.$or: This operator is used to perform logical OR operation on the array of two or more expressions and select or retrieve only those documents that match at least one of the given expression in the array. 
syntax:{ $or: [ { Expression1 }, { Expression2 }, ..., { ExpressionN } ] }
example:db.employee.find({$or: [{branch: "ENCE"},
                     {joiningYear: 2027}]})
3.This operator is used to perform logical NOT operation on the specified operator expressions and select or retrieve only those documents that do not match the given operator expression. It also includes those documents that don’t contain the field. You can use this operator in methods like find(), update(), etc. according to your requirements.
syntax:{ field: { $not: { operator-expression } } }
example:db.employee.find({salary: {$not: {$gt: 2000}}})
Q-How to check field existance in mongodb ?
ans:-To check field existence in MongoDB, we can use the $exists operator. This operator allows us to query documents based on whether a particular field exists or does not exist.
    This operator can take a boolean value (true or false):
    true: It signifies that Matches documents that contain the field.
    false: It signifies Matches documents that do not contain the field.
  syntax:{ field: { $exists: <boolean> } }
  example: To find documents where the age field exists and is not equal to 18.
  db.students.find({ age: { $exists: true, $ne: 18 } })
Q-COMMANDS:
1.limit:-The limit() method in MongoDB is used to specify the maximum number of documents that should be returned in a query result.
 -It is particularly useful for controlling the size of the result set especially when dealing with large collections.
 -By using limit(), we can restrict the number of documents retrieved, which can improve performance and reduce the load on the client.
 syntax:db.collectionName.find(<query>).limit(<number>)
 example:db.users.find().limit(2)
2.count:-In MongoDB, the count command is used to count the number of documents in a collection that match a specified query. There are several ways to perform a count operation in MongoDB. Here are the most commonly used methods:
 I.countDocuments:This is the preferred method for counting documents in MongoDB.                 
 syntax:-db.collection.countDocuments(query);
 example:db.users.countDocuments({ age: { $gt: 20 } });
 II.The count method is deprecated in newer versions of MongoDB (4.0+), but it is still used in some older codebases.
 syntax:db.collection.count(query);
 example:db.users.count({ age: { $gt: 20 } });
3.sort:-In MongoDB, the sort() method is used to specify the order in which the query returns matching documents from a collection. It allows users to arrange documents in either ascending (1) or descending (-1) order based on the values of one or more fields.
syntax:db.collection.find(query).sort(sortCriteria);
       db.collection.find().sort({ field1: 1, field2: -1 })
example:db.student.find().sort({age:1})// Ascending Order
        db.student.find().sort({age:-1})// Descending Order
        db.users.find({ age: { $gt: 20 } }).sort({ age: 1, name: -1 });

4.distinct:-The distinct() method in MongoDB is a powerful tool used to find unique values for a specified field across a single collection.
syntax:- db.Collection_name.distinct(field : <string>)
example: db.student.distinct("name")
         db.student.distinct("marks")
5.populate:In MongoDB, Population is the process of replacing the specified path in the document of one collection with the actual document from the other collection.         
 Here's a basic overview of how populate works: 
  -Defining Schemas with References: First, define schemas where one schema references another.
  -Using populate in Queries: When querying the collection, use the populate method to fill in the referenced documents.
6.like operator:To query MongoDB with a “like” operator equivalent, we can use the $regex operator along with regular expressions. However, MongoDB offers several methods to query MongoDB with “like” are defined below:
1.Using $regex Expressions
2.Using the Regular Operator
syntax:db.collection.find({ "field": { $regex: /pattern/i } });
 collection: The name of the MongoDB collection we want to query.
“field”: The field within the documents we want to query.
/pattern/: The regular expression pattern we want to match.
i: An optional flag that makes the pattern case-insensitive.
example: db.users.find({ "name": { $regex: /john/i } });
  











 


